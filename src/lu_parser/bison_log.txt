Terminals unused in grammar

    "%"


State 5 conflicts: 1 shift/reduce
State 17 conflicts: 1 shift/reduce
State 21 conflicts: 1 shift/reduce
State 46 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: %empty
    2        | statements

    3 statements: statement
    4           | statements statement

    5 statement: dec
    6          | expr
    7          | lambda_def

    8 decs: dec
    9     | decs "," dec

   10 dec: var_dec
   11    | lambda_dec

   12 var_dec: IDENT IDENT
   13        | IDENT IDENT "=" expr

   14 lambda_dec: "lambda" IDENT IDENT "(" decs ")"
   15           | "lambda" IDENT IDENT "(" ")"
   16           | "lambda" IDENT IDENT "(" decs "..." ")"

   17 lambda_def: lambda_dec "->" lambda_body

   18 lambda_body: expr
   19            | lambda_block

   20 lambda_block: "{" statements "return" expr "}"
   21             | "{" "}"
   22             | "{" statements "}"
   23             | "{" "return" expr "}"

   24 expr: IDENT
   25     | INT_LIT
   26     | FLT_LIT
   27     | BOOL_LIT
   28     | STR_LIT
   29     | "-" expr
   30     | "!" expr
   31     | expr "+" expr
   32     | expr "-" expr
   33     | expr "&&" expr
   34     | expr "||" expr
   35     | expr "==" expr
   36     | expr "!=" expr
   37     | expr "*" expr
   38     | expr "/" expr
   39     | IDENT "=" expr
   40     | IDENT "(" lambda_args ")"
   41     | "(" expr ")"

   42 lambda_args: expr
   43            | lambda_args "," expr
   44            | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT_LIT <int64_t> (258) 25
    FLT_LIT <double> (259) 26
    STR_LIT <std::string> (260) 28
    BOOL_LIT <bool> (261) 27
    IDENT <std::string> (262) 12 13 14 15 16 24 39 40
    "+" (263) 31
    "*" (264) 37
    "-" (265) 29 32
    "/" (266) 38
    "%" (267)
    "(" (268) 14 15 16 40 41
    ")" (269) 14 15 16 40 41
    "lambda" (270) 14 15 16
    "=" (271) 13 39
    "==" (272) 35
    "!=" (273) 36
    "||" (274) 34
    "&&" (275) 33
    "," (276) 9 43
    "->" (277) 17
    "{" (278) 20 21 22 23
    "}" (279) 20 21 22 23
    "return" (280) 20 23
    "..." (281) 16
    "!" (282) 30
    UNEG (283)
    UNOT (284)
    EXPR_GROUP (285)
    DECL_TOK (286)


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1 2
        on right: 0
    statements <std::vector<ast_node_uptr>> (34)
        on left: 3 4
        on right: 2 4 20 22
    statement <ast_node_uptr> (35)
        on left: 5 6 7
        on right: 3 4
    decs <std::vector<ast_node_uptr>> (36)
        on left: 8 9
        on right: 9 14 16
    dec <ast_node_uptr> (37)
        on left: 10 11
        on right: 5 8 9
    var_dec <ast_expr_uptr> (38)
        on left: 12 13
        on right: 10
    lambda_dec <ast_func_proto_uptr> (39)
        on left: 14 15 16
        on right: 11 17
    lambda_def <ast_func_def_uptr> (40)
        on left: 17
        on right: 7
    lambda_body <ast_node_uptr> (41)
        on left: 18 19
        on right: 17
    lambda_block <ast_func_block_uptr> (42)
        on left: 20 21 22 23
        on right: 19
    expr <ast_expr_uptr> (43)
        on left: 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
        on right: 6 13 18 20 23 29 30 31 32 33 34 35 36 37 38 39 41 42 43
    lambda_args <std::vector<ast_expr_uptr>> (44)
        on left: 42 43 44
        on right: 40 43


State 0

    0 $accept: • program $end

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 5
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "lambda"  shift, and go to state 8
    "!"       shift, and go to state 9

    $default  reduce using rule 1 (program)

    program     go to state 10
    statements  go to state 11
    statement   go to state 12
    dec         go to state 13
    var_dec     go to state 14
    lambda_dec  go to state 15
    lambda_def  go to state 16
    expr        go to state 17


State 1

   25 expr: INT_LIT •

    $default  reduce using rule 25 (expr)


State 2

   26 expr: FLT_LIT •

    $default  reduce using rule 26 (expr)


State 3

   28 expr: STR_LIT •

    $default  reduce using rule 28 (expr)


State 4

   27 expr: BOOL_LIT •

    $default  reduce using rule 27 (expr)


State 5

   12 var_dec: IDENT • IDENT
   13        | IDENT • IDENT "=" expr
   24 expr: IDENT •
   39     | IDENT • "=" expr
   40     | IDENT • "(" lambda_args ")"

    IDENT  shift, and go to state 18
    "("    shift, and go to state 19
    "="    shift, and go to state 20

    "("       [reduce using rule 24 (expr)]
    $default  reduce using rule 24 (expr)


State 6

   29 expr: "-" • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 22


State 7

   41 expr: "(" • expr ")"

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 23


State 8

   14 lambda_dec: "lambda" • IDENT IDENT "(" decs ")"
   15           | "lambda" • IDENT IDENT "(" ")"
   16           | "lambda" • IDENT IDENT "(" decs "..." ")"

    IDENT  shift, and go to state 24


State 9

   30 expr: "!" • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 25


State 10

    0 $accept: program • $end

    $end  shift, and go to state 26


State 11

    2 program: statements •
    4 statements: statements • statement

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 5
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "lambda"  shift, and go to state 8
    "!"       shift, and go to state 9

    $default  reduce using rule 2 (program)

    statement   go to state 27
    dec         go to state 13
    var_dec     go to state 14
    lambda_dec  go to state 15
    lambda_def  go to state 16
    expr        go to state 17


State 12

    3 statements: statement •

    $default  reduce using rule 3 (statements)


State 13

    5 statement: dec •

    $default  reduce using rule 5 (statement)


State 14

   10 dec: var_dec •

    $default  reduce using rule 10 (dec)


State 15

   11 dec: lambda_dec •
   17 lambda_def: lambda_dec • "->" lambda_body

    "->"  shift, and go to state 28

    $default  reduce using rule 11 (dec)


State 16

    7 statement: lambda_def •

    $default  reduce using rule 7 (statement)


State 17

    6 statement: expr •
   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr

    "+"   shift, and go to state 29
    "*"   shift, and go to state 30
    "-"   shift, and go to state 31
    "/"   shift, and go to state 32
    "=="  shift, and go to state 33
    "!="  shift, and go to state 34
    "||"  shift, and go to state 35
    "&&"  shift, and go to state 36

    "-"       [reduce using rule 6 (statement)]
    $default  reduce using rule 6 (statement)


State 18

   12 var_dec: IDENT IDENT •
   13        | IDENT IDENT • "=" expr

    "="  shift, and go to state 37

    $default  reduce using rule 12 (var_dec)


State 19

   40 expr: IDENT "(" • lambda_args ")"

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    $default  reduce using rule 44 (lambda_args)

    expr         go to state 38
    lambda_args  go to state 39


State 20

   39 expr: IDENT "=" • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 40


State 21

   24 expr: IDENT •
   39     | IDENT • "=" expr
   40     | IDENT • "(" lambda_args ")"

    "("  shift, and go to state 19
    "="  shift, and go to state 20

    "("       [reduce using rule 24 (expr)]
    $default  reduce using rule 24 (expr)


State 22

   29 expr: "-" expr •
   31     | expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr

    $default  reduce using rule 29 (expr)


State 23

   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr
   41     | "(" expr • ")"

    "+"   shift, and go to state 29
    "*"   shift, and go to state 30
    "-"   shift, and go to state 31
    "/"   shift, and go to state 32
    ")"   shift, and go to state 41
    "=="  shift, and go to state 33
    "!="  shift, and go to state 34
    "||"  shift, and go to state 35
    "&&"  shift, and go to state 36


State 24

   14 lambda_dec: "lambda" IDENT • IDENT "(" decs ")"
   15           | "lambda" IDENT • IDENT "(" ")"
   16           | "lambda" IDENT • IDENT "(" decs "..." ")"

    IDENT  shift, and go to state 42


State 25

   30 expr: "!" expr •
   31     | expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr

    $default  reduce using rule 30 (expr)


State 26

    0 $accept: program $end •

    $default  accept


State 27

    4 statements: statements statement •

    $default  reduce using rule 4 (statements)


State 28

   17 lambda_def: lambda_dec "->" • lambda_body

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "{"       shift, and go to state 43
    "!"       shift, and go to state 9

    lambda_body   go to state 44
    lambda_block  go to state 45
    expr          go to state 46


State 29

   31 expr: expr "+" • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 47


State 30

   37 expr: expr "*" • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 48


State 31

   32 expr: expr "-" • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 49


State 32

   38 expr: expr "/" • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 50


State 33

   35 expr: expr "==" • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 51


State 34

   36 expr: expr "!=" • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 52


State 35

   34 expr: expr "||" • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 53


State 36

   33 expr: expr "&&" • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 54


State 37

   13 var_dec: IDENT IDENT "=" • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 55


State 38

   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr
   42 lambda_args: expr •

    "+"   shift, and go to state 29
    "*"   shift, and go to state 30
    "-"   shift, and go to state 31
    "/"   shift, and go to state 32
    "=="  shift, and go to state 33
    "!="  shift, and go to state 34
    "||"  shift, and go to state 35
    "&&"  shift, and go to state 36

    $default  reduce using rule 42 (lambda_args)


State 39

   40 expr: IDENT "(" lambda_args • ")"
   43 lambda_args: lambda_args • "," expr

    ")"  shift, and go to state 56
    ","  shift, and go to state 57


State 40

   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr
   39     | IDENT "=" expr •

    "+"   shift, and go to state 29
    "*"   shift, and go to state 30
    "-"   shift, and go to state 31
    "/"   shift, and go to state 32
    "=="  shift, and go to state 33
    "!="  shift, and go to state 34
    "||"  shift, and go to state 35
    "&&"  shift, and go to state 36

    $default  reduce using rule 39 (expr)


State 41

   41 expr: "(" expr ")" •

    $default  reduce using rule 41 (expr)


State 42

   14 lambda_dec: "lambda" IDENT IDENT • "(" decs ")"
   15           | "lambda" IDENT IDENT • "(" ")"
   16           | "lambda" IDENT IDENT • "(" decs "..." ")"

    "("  shift, and go to state 58


State 43

   20 lambda_block: "{" • statements "return" expr "}"
   21             | "{" • "}"
   22             | "{" • statements "}"
   23             | "{" • "return" expr "}"

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 5
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "lambda"  shift, and go to state 8
    "}"       shift, and go to state 59
    "return"  shift, and go to state 60
    "!"       shift, and go to state 9

    statements  go to state 61
    statement   go to state 12
    dec         go to state 13
    var_dec     go to state 14
    lambda_dec  go to state 15
    lambda_def  go to state 16
    expr        go to state 17


State 44

   17 lambda_def: lambda_dec "->" lambda_body •

    $default  reduce using rule 17 (lambda_def)


State 45

   19 lambda_body: lambda_block •

    $default  reduce using rule 19 (lambda_body)


State 46

   18 lambda_body: expr •
   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr

    "+"   shift, and go to state 29
    "*"   shift, and go to state 30
    "-"   shift, and go to state 31
    "/"   shift, and go to state 32
    "=="  shift, and go to state 33
    "!="  shift, and go to state 34
    "||"  shift, and go to state 35
    "&&"  shift, and go to state 36

    "-"       [reduce using rule 18 (lambda_body)]
    $default  reduce using rule 18 (lambda_body)


State 47

   31 expr: expr • "+" expr
   31     | expr "+" expr •
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr

    "*"  shift, and go to state 30
    "/"  shift, and go to state 32

    $default  reduce using rule 31 (expr)


State 48

   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   37     | expr "*" expr •
   38     | expr • "/" expr

    $default  reduce using rule 37 (expr)


State 49

   31 expr: expr • "+" expr
   32     | expr • "-" expr
   32     | expr "-" expr •
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr

    "*"  shift, and go to state 30
    "/"  shift, and go to state 32

    $default  reduce using rule 32 (expr)


State 50

   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr
   38     | expr "/" expr •

    $default  reduce using rule 38 (expr)


State 51

   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   35     | expr "==" expr •
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr

    "*"  shift, and go to state 30
    "/"  shift, and go to state 32

    $default  reduce using rule 35 (expr)


State 52

   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   36     | expr "!=" expr •
   37     | expr • "*" expr
   38     | expr • "/" expr

    "*"  shift, and go to state 30
    "/"  shift, and go to state 32

    $default  reduce using rule 36 (expr)


State 53

   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   34     | expr "||" expr •
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr

    "*"  shift, and go to state 30
    "/"  shift, and go to state 32

    $default  reduce using rule 34 (expr)


State 54

   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   33     | expr "&&" expr •
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr

    "*"  shift, and go to state 30
    "/"  shift, and go to state 32

    $default  reduce using rule 33 (expr)


State 55

   13 var_dec: IDENT IDENT "=" expr •
   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr

    "+"   shift, and go to state 29
    "*"   shift, and go to state 30
    "-"   shift, and go to state 31
    "/"   shift, and go to state 32
    "=="  shift, and go to state 33
    "!="  shift, and go to state 34
    "||"  shift, and go to state 35
    "&&"  shift, and go to state 36

    $default  reduce using rule 13 (var_dec)


State 56

   40 expr: IDENT "(" lambda_args ")" •

    $default  reduce using rule 40 (expr)


State 57

   43 lambda_args: lambda_args "," • expr

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 62


State 58

   14 lambda_dec: "lambda" IDENT IDENT "(" • decs ")"
   15           | "lambda" IDENT IDENT "(" • ")"
   16           | "lambda" IDENT IDENT "(" • decs "..." ")"

    IDENT     shift, and go to state 63
    ")"       shift, and go to state 64
    "lambda"  shift, and go to state 8

    decs        go to state 65
    dec         go to state 66
    var_dec     go to state 14
    lambda_dec  go to state 67


State 59

   21 lambda_block: "{" "}" •

    $default  reduce using rule 21 (lambda_block)


State 60

   23 lambda_block: "{" "return" • expr "}"

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 68


State 61

    4 statements: statements • statement
   20 lambda_block: "{" statements • "return" expr "}"
   22             | "{" statements • "}"

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 5
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "lambda"  shift, and go to state 8
    "}"       shift, and go to state 69
    "return"  shift, and go to state 70
    "!"       shift, and go to state 9

    statement   go to state 27
    dec         go to state 13
    var_dec     go to state 14
    lambda_dec  go to state 15
    lambda_def  go to state 16
    expr        go to state 17


State 62

   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr
   43 lambda_args: lambda_args "," expr •

    "+"   shift, and go to state 29
    "*"   shift, and go to state 30
    "-"   shift, and go to state 31
    "/"   shift, and go to state 32
    "=="  shift, and go to state 33
    "!="  shift, and go to state 34
    "||"  shift, and go to state 35
    "&&"  shift, and go to state 36

    $default  reduce using rule 43 (lambda_args)


State 63

   12 var_dec: IDENT • IDENT
   13        | IDENT • IDENT "=" expr

    IDENT  shift, and go to state 18


State 64

   15 lambda_dec: "lambda" IDENT IDENT "(" ")" •

    $default  reduce using rule 15 (lambda_dec)


State 65

    9 decs: decs • "," dec
   14 lambda_dec: "lambda" IDENT IDENT "(" decs • ")"
   16           | "lambda" IDENT IDENT "(" decs • "..." ")"

    ")"    shift, and go to state 71
    ","    shift, and go to state 72
    "..."  shift, and go to state 73


State 66

    8 decs: dec •

    $default  reduce using rule 8 (decs)


State 67

   11 dec: lambda_dec •

    $default  reduce using rule 11 (dec)


State 68

   23 lambda_block: "{" "return" expr • "}"
   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr

    "+"   shift, and go to state 29
    "*"   shift, and go to state 30
    "-"   shift, and go to state 31
    "/"   shift, and go to state 32
    "=="  shift, and go to state 33
    "!="  shift, and go to state 34
    "||"  shift, and go to state 35
    "&&"  shift, and go to state 36
    "}"   shift, and go to state 74


State 69

   22 lambda_block: "{" statements "}" •

    $default  reduce using rule 22 (lambda_block)


State 70

   20 lambda_block: "{" statements "return" • expr "}"

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    BOOL_LIT  shift, and go to state 4
    IDENT     shift, and go to state 21
    "-"       shift, and go to state 6
    "("       shift, and go to state 7
    "!"       shift, and go to state 9

    expr  go to state 75


State 71

   14 lambda_dec: "lambda" IDENT IDENT "(" decs ")" •

    $default  reduce using rule 14 (lambda_dec)


State 72

    9 decs: decs "," • dec

    IDENT     shift, and go to state 63
    "lambda"  shift, and go to state 8

    dec         go to state 76
    var_dec     go to state 14
    lambda_dec  go to state 67


State 73

   16 lambda_dec: "lambda" IDENT IDENT "(" decs "..." • ")"

    ")"  shift, and go to state 77


State 74

   23 lambda_block: "{" "return" expr "}" •

    $default  reduce using rule 23 (lambda_block)


State 75

   20 lambda_block: "{" statements "return" expr • "}"
   31 expr: expr • "+" expr
   32     | expr • "-" expr
   33     | expr • "&&" expr
   34     | expr • "||" expr
   35     | expr • "==" expr
   36     | expr • "!=" expr
   37     | expr • "*" expr
   38     | expr • "/" expr

    "+"   shift, and go to state 29
    "*"   shift, and go to state 30
    "-"   shift, and go to state 31
    "/"   shift, and go to state 32
    "=="  shift, and go to state 33
    "!="  shift, and go to state 34
    "||"  shift, and go to state 35
    "&&"  shift, and go to state 36
    "}"   shift, and go to state 78


State 76

    9 decs: decs "," dec •

    $default  reduce using rule 9 (decs)


State 77

   16 lambda_dec: "lambda" IDENT IDENT "(" decs "..." ")" •

    $default  reduce using rule 16 (lambda_dec)


State 78

   20 lambda_block: "{" statements "return" expr "}" •

    $default  reduce using rule 20 (lambda_block)
