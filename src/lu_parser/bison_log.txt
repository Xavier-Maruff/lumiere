Nonterminals useless in grammar

    block


Terminals unused in grammar

    "*"
    "-"
    "/"
    "%"
    "=="


Rules useless in grammar

   31 block: "{" statements "}"


State 4 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: %empty
    2        | statements

    3 statements: statement
    4           | statements statement

    5 statement: dec
    6          | var_dec "=" expr
    7          | IDENT "=" expr
    8          | expr

    9 decs: dec
   10     | decs "," dec

   11 dec: var_dec
   12    | lambda_dec
   13    | lambda_def

   14 var_dec: IDENT IDENT

   15 lambda_dec: "lambda" IDENT IDENT "(" decs ")"
   16           | "lambda" IDENT IDENT "(" ")"

   17 lambda_def: lambda_dec "->" lambda_body

   18 lambda_body: expr
   19            | lambda_block

   20 lambda_block: "{" statements "return" expr "}"
   21             | "{" "return" expr "}"

   22 expr: IDENT
   23     | INT_LIT
   24     | FLT_LIT
   25     | STR_LIT
   26     | expr "+" expr
   27     | IDENT "(" lambda_args ")"

   28 lambda_args: expr
   29            | lambda_args "," expr
   30            | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT_LIT <int64_t> (258) 23
    FLT_LIT <double> (259) 24
    STR_LIT <std::string> (260) 25
    IDENT <std::string> (261) 7 14 15 16 22 27
    "+" (262) 26
    "*" (263)
    "-" (264)
    "/" (265)
    "%" (266)
    "(" (267) 15 16 27
    ")" (268) 15 16 27
    "lambda" (269) 15 16
    "=" (270) 6 7
    "==" (271)
    "," (272) 10 29
    "->" (273) 17
    "{" (274) 20 21
    "}" (275) 20 21
    "return" (276) 20 21


Nonterminals, with rules where they appear

    $accept (22)
        on left: 0
    program (23)
        on left: 1 2
        on right: 0
    statements <std::vector<ast_node_uptr>> (24)
        on left: 3 4
        on right: 2 4 20
    statement <ast_node_uptr> (25)
        on left: 5 6 7 8
        on right: 3 4
    decs <std::vector<ast_node_uptr>> (26)
        on left: 9 10
        on right: 10 15
    dec <ast_node_uptr> (27)
        on left: 11 12 13
        on right: 5 9 10
    var_dec <ast_var_expr_uptr> (28)
        on left: 14
        on right: 6 11
    lambda_dec <ast_func_proto_uptr> (29)
        on left: 15 16
        on right: 12 17
    lambda_def <ast_func_def_uptr> (30)
        on left: 17
        on right: 13
    lambda_body <ast_node_uptr> (31)
        on left: 18 19
        on right: 17
    lambda_block <ast_func_block_uptr> (32)
        on left: 20 21
        on right: 19
    expr <ast_expr_uptr> (33)
        on left: 22 23 24 25 26 27
        on right: 6 7 8 18 20 21 26 28 29
    lambda_args <std::vector<ast_expr_uptr>> (34)
        on left: 28 29 30
        on right: 27 29


State 0

    0 $accept: • program $end

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    IDENT     shift, and go to state 4
    "lambda"  shift, and go to state 5

    $default  reduce using rule 1 (program)

    program     go to state 6
    statements  go to state 7
    statement   go to state 8
    dec         go to state 9
    var_dec     go to state 10
    lambda_dec  go to state 11
    lambda_def  go to state 12
    expr        go to state 13


State 1

   23 expr: INT_LIT •

    $default  reduce using rule 23 (expr)


State 2

   24 expr: FLT_LIT •

    $default  reduce using rule 24 (expr)


State 3

   25 expr: STR_LIT •

    $default  reduce using rule 25 (expr)


State 4

    7 statement: IDENT • "=" expr
   14 var_dec: IDENT • IDENT
   22 expr: IDENT •
   27     | IDENT • "(" lambda_args ")"

    IDENT  shift, and go to state 14
    "("    shift, and go to state 15
    "="    shift, and go to state 16

    IDENT     [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)


State 5

   15 lambda_dec: "lambda" • IDENT IDENT "(" decs ")"
   16           | "lambda" • IDENT IDENT "(" ")"

    IDENT  shift, and go to state 17


State 6

    0 $accept: program • $end

    $end  shift, and go to state 18


State 7

    2 program: statements •
    4 statements: statements • statement

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    IDENT     shift, and go to state 4
    "lambda"  shift, and go to state 5

    $default  reduce using rule 2 (program)

    statement   go to state 19
    dec         go to state 9
    var_dec     go to state 10
    lambda_dec  go to state 11
    lambda_def  go to state 12
    expr        go to state 13


State 8

    3 statements: statement •

    $default  reduce using rule 3 (statements)


State 9

    5 statement: dec •

    $default  reduce using rule 5 (statement)


State 10

    6 statement: var_dec • "=" expr
   11 dec: var_dec •

    "="  shift, and go to state 20

    $default  reduce using rule 11 (dec)


State 11

   12 dec: lambda_dec •
   17 lambda_def: lambda_dec • "->" lambda_body

    "->"  shift, and go to state 21

    $default  reduce using rule 12 (dec)


State 12

   13 dec: lambda_def •

    $default  reduce using rule 13 (dec)


State 13

    8 statement: expr •
   26 expr: expr • "+" expr

    "+"  shift, and go to state 22

    $default  reduce using rule 8 (statement)


State 14

   14 var_dec: IDENT IDENT •

    $default  reduce using rule 14 (var_dec)


State 15

   27 expr: IDENT "(" • lambda_args ")"

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 23

    $default  reduce using rule 30 (lambda_args)

    expr         go to state 24
    lambda_args  go to state 25


State 16

    7 statement: IDENT "=" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 23

    expr  go to state 26


State 17

   15 lambda_dec: "lambda" IDENT • IDENT "(" decs ")"
   16           | "lambda" IDENT • IDENT "(" ")"

    IDENT  shift, and go to state 27


State 18

    0 $accept: program $end •

    $default  accept


State 19

    4 statements: statements statement •

    $default  reduce using rule 4 (statements)


State 20

    6 statement: var_dec "=" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 23

    expr  go to state 28


State 21

   17 lambda_def: lambda_dec "->" • lambda_body

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 23
    "{"      shift, and go to state 29

    lambda_body   go to state 30
    lambda_block  go to state 31
    expr          go to state 32


State 22

   26 expr: expr "+" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 23

    expr  go to state 33


State 23

   22 expr: IDENT •
   27     | IDENT • "(" lambda_args ")"

    "("  shift, and go to state 15

    $default  reduce using rule 22 (expr)


State 24

   26 expr: expr • "+" expr
   28 lambda_args: expr •

    "+"  shift, and go to state 22

    $default  reduce using rule 28 (lambda_args)


State 25

   27 expr: IDENT "(" lambda_args • ")"
   29 lambda_args: lambda_args • "," expr

    ")"  shift, and go to state 34
    ","  shift, and go to state 35


State 26

    7 statement: IDENT "=" expr •
   26 expr: expr • "+" expr

    "+"  shift, and go to state 22

    $default  reduce using rule 7 (statement)


State 27

   15 lambda_dec: "lambda" IDENT IDENT • "(" decs ")"
   16           | "lambda" IDENT IDENT • "(" ")"

    "("  shift, and go to state 36


State 28

    6 statement: var_dec "=" expr •
   26 expr: expr • "+" expr

    "+"  shift, and go to state 22

    $default  reduce using rule 6 (statement)


State 29

   20 lambda_block: "{" • statements "return" expr "}"
   21             | "{" • "return" expr "}"

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    IDENT     shift, and go to state 4
    "lambda"  shift, and go to state 5
    "return"  shift, and go to state 37

    statements  go to state 38
    statement   go to state 8
    dec         go to state 9
    var_dec     go to state 10
    lambda_dec  go to state 11
    lambda_def  go to state 12
    expr        go to state 13


State 30

   17 lambda_def: lambda_dec "->" lambda_body •

    $default  reduce using rule 17 (lambda_def)


State 31

   19 lambda_body: lambda_block •

    $default  reduce using rule 19 (lambda_body)


State 32

   18 lambda_body: expr •
   26 expr: expr • "+" expr

    "+"  shift, and go to state 22

    $default  reduce using rule 18 (lambda_body)


State 33

   26 expr: expr • "+" expr
   26     | expr "+" expr •

    $default  reduce using rule 26 (expr)


State 34

   27 expr: IDENT "(" lambda_args ")" •

    $default  reduce using rule 27 (expr)


State 35

   29 lambda_args: lambda_args "," • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 23

    expr  go to state 39


State 36

   15 lambda_dec: "lambda" IDENT IDENT "(" • decs ")"
   16           | "lambda" IDENT IDENT "(" • ")"

    IDENT     shift, and go to state 40
    ")"       shift, and go to state 41
    "lambda"  shift, and go to state 5

    decs        go to state 42
    dec         go to state 43
    var_dec     go to state 44
    lambda_dec  go to state 11
    lambda_def  go to state 12


State 37

   21 lambda_block: "{" "return" • expr "}"

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 23

    expr  go to state 45


State 38

    4 statements: statements • statement
   20 lambda_block: "{" statements • "return" expr "}"

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    IDENT     shift, and go to state 4
    "lambda"  shift, and go to state 5
    "return"  shift, and go to state 46

    statement   go to state 19
    dec         go to state 9
    var_dec     go to state 10
    lambda_dec  go to state 11
    lambda_def  go to state 12
    expr        go to state 13


State 39

   26 expr: expr • "+" expr
   29 lambda_args: lambda_args "," expr •

    "+"  shift, and go to state 22

    $default  reduce using rule 29 (lambda_args)


State 40

   14 var_dec: IDENT • IDENT

    IDENT  shift, and go to state 14


State 41

   16 lambda_dec: "lambda" IDENT IDENT "(" ")" •

    $default  reduce using rule 16 (lambda_dec)


State 42

   10 decs: decs • "," dec
   15 lambda_dec: "lambda" IDENT IDENT "(" decs • ")"

    ")"  shift, and go to state 47
    ","  shift, and go to state 48


State 43

    9 decs: dec •

    $default  reduce using rule 9 (decs)


State 44

   11 dec: var_dec •

    $default  reduce using rule 11 (dec)


State 45

   21 lambda_block: "{" "return" expr • "}"
   26 expr: expr • "+" expr

    "+"  shift, and go to state 22
    "}"  shift, and go to state 49


State 46

   20 lambda_block: "{" statements "return" • expr "}"

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 23

    expr  go to state 50


State 47

   15 lambda_dec: "lambda" IDENT IDENT "(" decs ")" •

    $default  reduce using rule 15 (lambda_dec)


State 48

   10 decs: decs "," • dec

    IDENT     shift, and go to state 40
    "lambda"  shift, and go to state 5

    dec         go to state 51
    var_dec     go to state 44
    lambda_dec  go to state 11
    lambda_def  go to state 12


State 49

   21 lambda_block: "{" "return" expr "}" •

    $default  reduce using rule 21 (lambda_block)


State 50

   20 lambda_block: "{" statements "return" expr • "}"
   26 expr: expr • "+" expr

    "+"  shift, and go to state 22
    "}"  shift, and go to state 52


State 51

   10 decs: decs "," dec •

    $default  reduce using rule 10 (decs)


State 52

   20 lambda_block: "{" statements "return" expr "}" •

    $default  reduce using rule 20 (lambda_block)
