Terminals unused in grammar

    "%"
    "=="


State 4 conflicts: 1 shift/reduce
State 15 conflicts: 1 shift/reduce
State 19 conflicts: 1 shift/reduce
State 39 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: %empty
    2        | statements

    3 statements: statement
    4           | statements statement

    5 statement: dec
    6          | expr
    7          | lambda_def

    8 decs: dec
    9     | decs "," dec

   10 dec: var_dec
   11    | lambda_dec

   12 var_dec: IDENT IDENT
   13        | IDENT IDENT "=" expr

   14 lambda_dec: "lambda" IDENT IDENT "(" decs ")"
   15           | "lambda" IDENT IDENT "(" ")"

   16 lambda_def: lambda_dec "->" lambda_body

   17 lambda_body: expr
   18            | lambda_block

   19 lambda_block: "{" statements "return" expr "}"
   20             | "{" "return" expr "}"

   21 expr: IDENT
   22     | INT_LIT
   23     | FLT_LIT
   24     | STR_LIT
   25     | "-" expr
   26     | expr "+" expr
   27     | expr "-" expr
   28     | expr "*" expr
   29     | expr "/" expr
   30     | IDENT "=" expr
   31     | IDENT "(" lambda_args ")"
   32     | "(" expr ")"

   33 lambda_args: expr
   34            | lambda_args "," expr
   35            | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT_LIT <int64_t> (258) 22
    FLT_LIT <double> (259) 23
    STR_LIT <std::string> (260) 24
    IDENT <std::string> (261) 12 13 14 15 21 30 31
    "+" (262) 26
    "*" (263) 28
    "-" (264) 25 27
    "/" (265) 29
    "%" (266)
    "(" (267) 14 15 31 32
    ")" (268) 14 15 31 32
    "lambda" (269) 14 15
    "=" (270) 13 30
    "==" (271)
    "," (272) 9 34
    "->" (273) 16
    "{" (274) 19 20
    "}" (275) 19 20
    "return" (276) 19 20
    UNEG (277)
    EXPR_GROUP (278)


Nonterminals, with rules where they appear

    $accept (24)
        on left: 0
    program (25)
        on left: 1 2
        on right: 0
    statements <std::vector<ast_node_uptr>> (26)
        on left: 3 4
        on right: 2 4 19
    statement <ast_node_uptr> (27)
        on left: 5 6 7
        on right: 3 4
    decs <std::vector<ast_node_uptr>> (28)
        on left: 8 9
        on right: 9 14
    dec <ast_node_uptr> (29)
        on left: 10 11
        on right: 5 8 9
    var_dec <ast_var_expr_uptr> (30)
        on left: 12 13
        on right: 10
    lambda_dec <ast_func_proto_uptr> (31)
        on left: 14 15
        on right: 11 16
    lambda_def <ast_func_def_uptr> (32)
        on left: 16
        on right: 7
    lambda_body <ast_node_uptr> (33)
        on left: 17 18
        on right: 16
    lambda_block <ast_func_block_uptr> (34)
        on left: 19 20
        on right: 18
    expr <ast_expr_uptr> (35)
        on left: 21 22 23 24 25 26 27 28 29 30 31 32
        on right: 6 13 17 19 20 25 26 27 28 29 30 32 33 34
    lambda_args <std::vector<ast_expr_uptr>> (36)
        on left: 33 34 35
        on right: 31 34


State 0

    0 $accept: • program $end

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    IDENT     shift, and go to state 4
    "-"       shift, and go to state 5
    "("       shift, and go to state 6
    "lambda"  shift, and go to state 7

    $default  reduce using rule 1 (program)

    program     go to state 8
    statements  go to state 9
    statement   go to state 10
    dec         go to state 11
    var_dec     go to state 12
    lambda_dec  go to state 13
    lambda_def  go to state 14
    expr        go to state 15


State 1

   22 expr: INT_LIT •

    $default  reduce using rule 22 (expr)


State 2

   23 expr: FLT_LIT •

    $default  reduce using rule 23 (expr)


State 3

   24 expr: STR_LIT •

    $default  reduce using rule 24 (expr)


State 4

   12 var_dec: IDENT • IDENT
   13        | IDENT • IDENT "=" expr
   21 expr: IDENT •
   30     | IDENT • "=" expr
   31     | IDENT • "(" lambda_args ")"

    IDENT  shift, and go to state 16
    "("    shift, and go to state 17
    "="    shift, and go to state 18

    "("       [reduce using rule 21 (expr)]
    $default  reduce using rule 21 (expr)

    shift/reduce conflict on token "(":
       21 expr: IDENT •
       31 expr: IDENT • "(" lambda_args ")"
      Example: IDENT • "(" expr ")"
      Shift derivation
        statements
        ↳ statement
          ↳ expr
            ↳ IDENT • lambda_args ")"
                      ↳ "(" expr
      Reduce derivation
        statements
        ↳ statements    statement
          ↳ statement   ↳ expr
            ↳ expr        ↳ "(" expr ")"
              ↳ IDENT •



State 5

   25 expr: "-" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 20


State 6

   32 expr: "(" • expr ")"

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 21


State 7

   14 lambda_dec: "lambda" • IDENT IDENT "(" decs ")"
   15           | "lambda" • IDENT IDENT "(" ")"

    IDENT  shift, and go to state 22


State 8

    0 $accept: program • $end

    $end  shift, and go to state 23


State 9

    2 program: statements •
    4 statements: statements • statement

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    IDENT     shift, and go to state 4
    "-"       shift, and go to state 5
    "("       shift, and go to state 6
    "lambda"  shift, and go to state 7

    $default  reduce using rule 2 (program)

    statement   go to state 24
    dec         go to state 11
    var_dec     go to state 12
    lambda_dec  go to state 13
    lambda_def  go to state 14
    expr        go to state 15


State 10

    3 statements: statement •

    $default  reduce using rule 3 (statements)


State 11

    5 statement: dec •

    $default  reduce using rule 5 (statement)


State 12

   10 dec: var_dec •

    $default  reduce using rule 10 (dec)


State 13

   11 dec: lambda_dec •
   16 lambda_def: lambda_dec • "->" lambda_body

    "->"  shift, and go to state 25

    $default  reduce using rule 11 (dec)


State 14

    7 statement: lambda_def •

    $default  reduce using rule 7 (statement)


State 15

    6 statement: expr •
   26 expr: expr • "+" expr
   27     | expr • "-" expr
   28     | expr • "*" expr
   29     | expr • "/" expr

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29

    "-"       [reduce using rule 6 (statement)]
    $default  reduce using rule 6 (statement)

    shift/reduce conflict on token "-":
        6 statement: expr •
       27 expr: expr • "-" expr
      Example: expr • "-" expr
      Shift derivation
        statements
        ↳ statement
          ↳ expr
            ↳ expr • "-" expr
      Reduce derivation
        statements
        ↳ statements  statement
          ↳ statement ↳ expr
            ↳ expr •    ↳ "-" expr



State 16

   12 var_dec: IDENT IDENT •
   13        | IDENT IDENT • "=" expr

    "="  shift, and go to state 30

    $default  reduce using rule 12 (var_dec)


State 17

   31 expr: IDENT "(" • lambda_args ")"

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    $default  reduce using rule 35 (lambda_args)

    expr         go to state 31
    lambda_args  go to state 32


State 18

   30 expr: IDENT "=" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 33


State 19

   21 expr: IDENT •
   30     | IDENT • "=" expr
   31     | IDENT • "(" lambda_args ")"

    "("  shift, and go to state 17
    "="  shift, and go to state 18

    "("       [reduce using rule 21 (expr)]
    $default  reduce using rule 21 (expr)

    shift/reduce conflict on token "(":
       21 expr: IDENT •
       31 expr: IDENT • "(" lambda_args ")"
      Example: "-" IDENT • "(" expr ")"
      Shift derivation
        statements
        ↳ statement
          ↳ expr
            ↳ "-" expr
                  ↳ IDENT • lambda_args ")"
                            ↳ "(" expr
      Reduce derivation
        statements
        ↳ statements          statement
          ↳ statement         ↳ expr
            ↳ expr              ↳ "(" expr ")"
              ↳ "-" expr
                    ↳ IDENT •



State 20

   25 expr: "-" expr •
   26     | expr • "+" expr
   27     | expr • "-" expr
   28     | expr • "*" expr
   29     | expr • "/" expr

    $default  reduce using rule 25 (expr)


State 21

   26 expr: expr • "+" expr
   27     | expr • "-" expr
   28     | expr • "*" expr
   29     | expr • "/" expr
   32     | "(" expr • ")"

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29
    ")"  shift, and go to state 34


State 22

   14 lambda_dec: "lambda" IDENT • IDENT "(" decs ")"
   15           | "lambda" IDENT • IDENT "(" ")"

    IDENT  shift, and go to state 35


State 23

    0 $accept: program $end •

    $default  accept


State 24

    4 statements: statements statement •

    $default  reduce using rule 4 (statements)


State 25

   16 lambda_def: lambda_dec "->" • lambda_body

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6
    "{"      shift, and go to state 36

    lambda_body   go to state 37
    lambda_block  go to state 38
    expr          go to state 39


State 26

   26 expr: expr "+" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 40


State 27

   28 expr: expr "*" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 41


State 28

   27 expr: expr "-" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 42


State 29

   29 expr: expr "/" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 43


State 30

   13 var_dec: IDENT IDENT "=" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 44


State 31

   26 expr: expr • "+" expr
   27     | expr • "-" expr
   28     | expr • "*" expr
   29     | expr • "/" expr
   33 lambda_args: expr •

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29

    $default  reduce using rule 33 (lambda_args)


State 32

   31 expr: IDENT "(" lambda_args • ")"
   34 lambda_args: lambda_args • "," expr

    ")"  shift, and go to state 45
    ","  shift, and go to state 46


State 33

   26 expr: expr • "+" expr
   27     | expr • "-" expr
   28     | expr • "*" expr
   29     | expr • "/" expr
   30     | IDENT "=" expr •

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29

    $default  reduce using rule 30 (expr)


State 34

   32 expr: "(" expr ")" •

    $default  reduce using rule 32 (expr)


State 35

   14 lambda_dec: "lambda" IDENT IDENT • "(" decs ")"
   15           | "lambda" IDENT IDENT • "(" ")"

    "("  shift, and go to state 47


State 36

   19 lambda_block: "{" • statements "return" expr "}"
   20             | "{" • "return" expr "}"

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    IDENT     shift, and go to state 4
    "-"       shift, and go to state 5
    "("       shift, and go to state 6
    "lambda"  shift, and go to state 7
    "return"  shift, and go to state 48

    statements  go to state 49
    statement   go to state 10
    dec         go to state 11
    var_dec     go to state 12
    lambda_dec  go to state 13
    lambda_def  go to state 14
    expr        go to state 15


State 37

   16 lambda_def: lambda_dec "->" lambda_body •

    $default  reduce using rule 16 (lambda_def)


State 38

   18 lambda_body: lambda_block •

    $default  reduce using rule 18 (lambda_body)


State 39

   17 lambda_body: expr •
   26 expr: expr • "+" expr
   27     | expr • "-" expr
   28     | expr • "*" expr
   29     | expr • "/" expr

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29

    "-"       [reduce using rule 17 (lambda_body)]
    $default  reduce using rule 17 (lambda_body)

    shift/reduce conflict on token "-":
       17 lambda_body: expr •
       27 expr: expr • "-" expr
      Example: lambda_dec "->" expr • "-" expr
      Shift derivation
        statements
        ↳ statement
          ↳ lambda_def
            ↳ lambda_dec "->" lambda_body
                              ↳ expr
                                ↳ expr • "-" expr
      Reduce derivation
        statements
        ↳ statements                        statement
          ↳ statement                       ↳ expr
            ↳ lambda_def                      ↳ "-" expr
              ↳ lambda_dec "->" lambda_body
                                ↳ expr •



State 40

   26 expr: expr • "+" expr
   26     | expr "+" expr •
   27     | expr • "-" expr
   28     | expr • "*" expr
   29     | expr • "/" expr

    "*"  shift, and go to state 27
    "/"  shift, and go to state 29

    $default  reduce using rule 26 (expr)


State 41

   26 expr: expr • "+" expr
   27     | expr • "-" expr
   28     | expr • "*" expr
   28     | expr "*" expr •
   29     | expr • "/" expr

    $default  reduce using rule 28 (expr)


State 42

   26 expr: expr • "+" expr
   27     | expr • "-" expr
   27     | expr "-" expr •
   28     | expr • "*" expr
   29     | expr • "/" expr

    "*"  shift, and go to state 27
    "/"  shift, and go to state 29

    $default  reduce using rule 27 (expr)


State 43

   26 expr: expr • "+" expr
   27     | expr • "-" expr
   28     | expr • "*" expr
   29     | expr • "/" expr
   29     | expr "/" expr •

    $default  reduce using rule 29 (expr)


State 44

   13 var_dec: IDENT IDENT "=" expr •
   26 expr: expr • "+" expr
   27     | expr • "-" expr
   28     | expr • "*" expr
   29     | expr • "/" expr

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29

    $default  reduce using rule 13 (var_dec)


State 45

   31 expr: IDENT "(" lambda_args ")" •

    $default  reduce using rule 31 (expr)


State 46

   34 lambda_args: lambda_args "," • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 50


State 47

   14 lambda_dec: "lambda" IDENT IDENT "(" • decs ")"
   15           | "lambda" IDENT IDENT "(" • ")"

    IDENT     shift, and go to state 51
    ")"       shift, and go to state 52
    "lambda"  shift, and go to state 7

    decs        go to state 53
    dec         go to state 54
    var_dec     go to state 12
    lambda_dec  go to state 55


State 48

   20 lambda_block: "{" "return" • expr "}"

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 56


State 49

    4 statements: statements • statement
   19 lambda_block: "{" statements • "return" expr "}"

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    IDENT     shift, and go to state 4
    "-"       shift, and go to state 5
    "("       shift, and go to state 6
    "lambda"  shift, and go to state 7
    "return"  shift, and go to state 57

    statement   go to state 24
    dec         go to state 11
    var_dec     go to state 12
    lambda_dec  go to state 13
    lambda_def  go to state 14
    expr        go to state 15


State 50

   26 expr: expr • "+" expr
   27     | expr • "-" expr
   28     | expr • "*" expr
   29     | expr • "/" expr
   34 lambda_args: lambda_args "," expr •

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29

    $default  reduce using rule 34 (lambda_args)


State 51

   12 var_dec: IDENT • IDENT
   13        | IDENT • IDENT "=" expr

    IDENT  shift, and go to state 16


State 52

   15 lambda_dec: "lambda" IDENT IDENT "(" ")" •

    $default  reduce using rule 15 (lambda_dec)


State 53

    9 decs: decs • "," dec
   14 lambda_dec: "lambda" IDENT IDENT "(" decs • ")"

    ")"  shift, and go to state 58
    ","  shift, and go to state 59


State 54

    8 decs: dec •

    $default  reduce using rule 8 (decs)


State 55

   11 dec: lambda_dec •

    $default  reduce using rule 11 (dec)


State 56

   20 lambda_block: "{" "return" expr • "}"
   26 expr: expr • "+" expr
   27     | expr • "-" expr
   28     | expr • "*" expr
   29     | expr • "/" expr

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29
    "}"  shift, and go to state 60


State 57

   19 lambda_block: "{" statements "return" • expr "}"

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 61


State 58

   14 lambda_dec: "lambda" IDENT IDENT "(" decs ")" •

    $default  reduce using rule 14 (lambda_dec)


State 59

    9 decs: decs "," • dec

    IDENT     shift, and go to state 51
    "lambda"  shift, and go to state 7

    dec         go to state 62
    var_dec     go to state 12
    lambda_dec  go to state 55


State 60

   20 lambda_block: "{" "return" expr "}" •

    $default  reduce using rule 20 (lambda_block)


State 61

   19 lambda_block: "{" statements "return" expr • "}"
   26 expr: expr • "+" expr
   27     | expr • "-" expr
   28     | expr • "*" expr
   29     | expr • "/" expr

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29
    "}"  shift, and go to state 63


State 62

    9 decs: decs "," dec •

    $default  reduce using rule 9 (decs)


State 63

   19 lambda_block: "{" statements "return" expr "}" •

    $default  reduce using rule 19 (lambda_block)
