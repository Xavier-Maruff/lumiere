Terminals unused in grammar

    "%"
    "=="


State 4 conflicts: 1 shift/reduce
State 15 conflicts: 1 shift/reduce
State 19 conflicts: 1 shift/reduce
State 39 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: %empty
    2        | statements

    3 statements: statement
    4           | statements statement

    5 statement: dec
    6          | expr
    7          | lambda_def

    8 decs: dec
    9     | decs "," dec

   10 dec: var_dec
   11    | lambda_dec

   12 var_dec: IDENT IDENT
   13        | IDENT IDENT "=" expr

   14 lambda_dec: "lambda" IDENT IDENT "(" decs ")"
   15           | "lambda" IDENT IDENT "(" ")"
   16           | "lambda" IDENT IDENT "(" decs "..." ")"

   17 lambda_def: lambda_dec "->" lambda_body

   18 lambda_body: expr
   19            | lambda_block

   20 lambda_block: "{" statements "return" expr "}"
   21             | "{" "}"
   22             | "{" statements "}"
   23             | "{" "return" expr "}"

   24 expr: IDENT
   25     | INT_LIT
   26     | FLT_LIT
   27     | STR_LIT
   28     | "-" expr
   29     | expr "+" expr
   30     | expr "-" expr
   31     | expr "*" expr
   32     | expr "/" expr
   33     | IDENT "=" expr
   34     | IDENT "(" lambda_args ")"
   35     | "(" expr ")"

   36 lambda_args: expr
   37            | lambda_args "," expr
   38            | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT_LIT <int64_t> (258) 25
    FLT_LIT <double> (259) 26
    STR_LIT <std::string> (260) 27
    IDENT <std::string> (261) 12 13 14 15 16 24 33 34
    "+" (262) 29
    "*" (263) 31
    "-" (264) 28 30
    "/" (265) 32
    "%" (266)
    "(" (267) 14 15 16 34 35
    ")" (268) 14 15 16 34 35
    "lambda" (269) 14 15 16
    "=" (270) 13 33
    "==" (271)
    "," (272) 9 37
    "->" (273) 17
    "{" (274) 20 21 22 23
    "}" (275) 20 21 22 23
    "return" (276) 20 23
    "..." (277) 16
    UNEG (278)
    EXPR_GROUP (279)
    DECL_TOK (280)


Nonterminals, with rules where they appear

    $accept (26)
        on left: 0
    program (27)
        on left: 1 2
        on right: 0
    statements <std::vector<ast_node_uptr>> (28)
        on left: 3 4
        on right: 2 4 20 22
    statement <ast_node_uptr> (29)
        on left: 5 6 7
        on right: 3 4
    decs <std::vector<ast_node_uptr>> (30)
        on left: 8 9
        on right: 9 14 16
    dec <ast_node_uptr> (31)
        on left: 10 11
        on right: 5 8 9
    var_dec <ast_expr_uptr> (32)
        on left: 12 13
        on right: 10
    lambda_dec <ast_func_proto_uptr> (33)
        on left: 14 15 16
        on right: 11 17
    lambda_def <ast_func_def_uptr> (34)
        on left: 17
        on right: 7
    lambda_body <ast_node_uptr> (35)
        on left: 18 19
        on right: 17
    lambda_block <ast_func_block_uptr> (36)
        on left: 20 21 22 23
        on right: 19
    expr <ast_expr_uptr> (37)
        on left: 24 25 26 27 28 29 30 31 32 33 34 35
        on right: 6 13 18 20 23 28 29 30 31 32 33 35 36 37
    lambda_args <std::vector<ast_expr_uptr>> (38)
        on left: 36 37 38
        on right: 34 37


State 0

    0 $accept: • program $end

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    IDENT     shift, and go to state 4
    "-"       shift, and go to state 5
    "("       shift, and go to state 6
    "lambda"  shift, and go to state 7

    $default  reduce using rule 1 (program)

    program     go to state 8
    statements  go to state 9
    statement   go to state 10
    dec         go to state 11
    var_dec     go to state 12
    lambda_dec  go to state 13
    lambda_def  go to state 14
    expr        go to state 15


State 1

   25 expr: INT_LIT •

    $default  reduce using rule 25 (expr)


State 2

   26 expr: FLT_LIT •

    $default  reduce using rule 26 (expr)


State 3

   27 expr: STR_LIT •

    $default  reduce using rule 27 (expr)


State 4

   12 var_dec: IDENT • IDENT
   13        | IDENT • IDENT "=" expr
   24 expr: IDENT •
   33     | IDENT • "=" expr
   34     | IDENT • "(" lambda_args ")"

    IDENT  shift, and go to state 16
    "("    shift, and go to state 17
    "="    shift, and go to state 18

    "("       [reduce using rule 24 (expr)]
    $default  reduce using rule 24 (expr)


State 5

   28 expr: "-" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 20


State 6

   35 expr: "(" • expr ")"

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 21


State 7

   14 lambda_dec: "lambda" • IDENT IDENT "(" decs ")"
   15           | "lambda" • IDENT IDENT "(" ")"
   16           | "lambda" • IDENT IDENT "(" decs "..." ")"

    IDENT  shift, and go to state 22


State 8

    0 $accept: program • $end

    $end  shift, and go to state 23


State 9

    2 program: statements •
    4 statements: statements • statement

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    IDENT     shift, and go to state 4
    "-"       shift, and go to state 5
    "("       shift, and go to state 6
    "lambda"  shift, and go to state 7

    $default  reduce using rule 2 (program)

    statement   go to state 24
    dec         go to state 11
    var_dec     go to state 12
    lambda_dec  go to state 13
    lambda_def  go to state 14
    expr        go to state 15


State 10

    3 statements: statement •

    $default  reduce using rule 3 (statements)


State 11

    5 statement: dec •

    $default  reduce using rule 5 (statement)


State 12

   10 dec: var_dec •

    $default  reduce using rule 10 (dec)


State 13

   11 dec: lambda_dec •
   17 lambda_def: lambda_dec • "->" lambda_body

    "->"  shift, and go to state 25

    $default  reduce using rule 11 (dec)


State 14

    7 statement: lambda_def •

    $default  reduce using rule 7 (statement)


State 15

    6 statement: expr •
   29 expr: expr • "+" expr
   30     | expr • "-" expr
   31     | expr • "*" expr
   32     | expr • "/" expr

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29

    "-"       [reduce using rule 6 (statement)]
    $default  reduce using rule 6 (statement)


State 16

   12 var_dec: IDENT IDENT •
   13        | IDENT IDENT • "=" expr

    "="  shift, and go to state 30

    $default  reduce using rule 12 (var_dec)


State 17

   34 expr: IDENT "(" • lambda_args ")"

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    $default  reduce using rule 38 (lambda_args)

    expr         go to state 31
    lambda_args  go to state 32


State 18

   33 expr: IDENT "=" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 33


State 19

   24 expr: IDENT •
   33     | IDENT • "=" expr
   34     | IDENT • "(" lambda_args ")"

    "("  shift, and go to state 17
    "="  shift, and go to state 18

    "("       [reduce using rule 24 (expr)]
    $default  reduce using rule 24 (expr)


State 20

   28 expr: "-" expr •
   29     | expr • "+" expr
   30     | expr • "-" expr
   31     | expr • "*" expr
   32     | expr • "/" expr

    $default  reduce using rule 28 (expr)


State 21

   29 expr: expr • "+" expr
   30     | expr • "-" expr
   31     | expr • "*" expr
   32     | expr • "/" expr
   35     | "(" expr • ")"

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29
    ")"  shift, and go to state 34


State 22

   14 lambda_dec: "lambda" IDENT • IDENT "(" decs ")"
   15           | "lambda" IDENT • IDENT "(" ")"
   16           | "lambda" IDENT • IDENT "(" decs "..." ")"

    IDENT  shift, and go to state 35


State 23

    0 $accept: program $end •

    $default  accept


State 24

    4 statements: statements statement •

    $default  reduce using rule 4 (statements)


State 25

   17 lambda_def: lambda_dec "->" • lambda_body

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6
    "{"      shift, and go to state 36

    lambda_body   go to state 37
    lambda_block  go to state 38
    expr          go to state 39


State 26

   29 expr: expr "+" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 40


State 27

   31 expr: expr "*" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 41


State 28

   30 expr: expr "-" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 42


State 29

   32 expr: expr "/" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 43


State 30

   13 var_dec: IDENT IDENT "=" • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 44


State 31

   29 expr: expr • "+" expr
   30     | expr • "-" expr
   31     | expr • "*" expr
   32     | expr • "/" expr
   36 lambda_args: expr •

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29

    $default  reduce using rule 36 (lambda_args)


State 32

   34 expr: IDENT "(" lambda_args • ")"
   37 lambda_args: lambda_args • "," expr

    ")"  shift, and go to state 45
    ","  shift, and go to state 46


State 33

   29 expr: expr • "+" expr
   30     | expr • "-" expr
   31     | expr • "*" expr
   32     | expr • "/" expr
   33     | IDENT "=" expr •

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29

    $default  reduce using rule 33 (expr)


State 34

   35 expr: "(" expr ")" •

    $default  reduce using rule 35 (expr)


State 35

   14 lambda_dec: "lambda" IDENT IDENT • "(" decs ")"
   15           | "lambda" IDENT IDENT • "(" ")"
   16           | "lambda" IDENT IDENT • "(" decs "..." ")"

    "("  shift, and go to state 47


State 36

   20 lambda_block: "{" • statements "return" expr "}"
   21             | "{" • "}"
   22             | "{" • statements "}"
   23             | "{" • "return" expr "}"

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    IDENT     shift, and go to state 4
    "-"       shift, and go to state 5
    "("       shift, and go to state 6
    "lambda"  shift, and go to state 7
    "}"       shift, and go to state 48
    "return"  shift, and go to state 49

    statements  go to state 50
    statement   go to state 10
    dec         go to state 11
    var_dec     go to state 12
    lambda_dec  go to state 13
    lambda_def  go to state 14
    expr        go to state 15


State 37

   17 lambda_def: lambda_dec "->" lambda_body •

    $default  reduce using rule 17 (lambda_def)


State 38

   19 lambda_body: lambda_block •

    $default  reduce using rule 19 (lambda_body)


State 39

   18 lambda_body: expr •
   29 expr: expr • "+" expr
   30     | expr • "-" expr
   31     | expr • "*" expr
   32     | expr • "/" expr

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29

    "-"       [reduce using rule 18 (lambda_body)]
    $default  reduce using rule 18 (lambda_body)


State 40

   29 expr: expr • "+" expr
   29     | expr "+" expr •
   30     | expr • "-" expr
   31     | expr • "*" expr
   32     | expr • "/" expr

    "*"  shift, and go to state 27
    "/"  shift, and go to state 29

    $default  reduce using rule 29 (expr)


State 41

   29 expr: expr • "+" expr
   30     | expr • "-" expr
   31     | expr • "*" expr
   31     | expr "*" expr •
   32     | expr • "/" expr

    $default  reduce using rule 31 (expr)


State 42

   29 expr: expr • "+" expr
   30     | expr • "-" expr
   30     | expr "-" expr •
   31     | expr • "*" expr
   32     | expr • "/" expr

    "*"  shift, and go to state 27
    "/"  shift, and go to state 29

    $default  reduce using rule 30 (expr)


State 43

   29 expr: expr • "+" expr
   30     | expr • "-" expr
   31     | expr • "*" expr
   32     | expr • "/" expr
   32     | expr "/" expr •

    $default  reduce using rule 32 (expr)


State 44

   13 var_dec: IDENT IDENT "=" expr •
   29 expr: expr • "+" expr
   30     | expr • "-" expr
   31     | expr • "*" expr
   32     | expr • "/" expr

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29

    $default  reduce using rule 13 (var_dec)


State 45

   34 expr: IDENT "(" lambda_args ")" •

    $default  reduce using rule 34 (expr)


State 46

   37 lambda_args: lambda_args "," • expr

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 51


State 47

   14 lambda_dec: "lambda" IDENT IDENT "(" • decs ")"
   15           | "lambda" IDENT IDENT "(" • ")"
   16           | "lambda" IDENT IDENT "(" • decs "..." ")"

    IDENT     shift, and go to state 52
    ")"       shift, and go to state 53
    "lambda"  shift, and go to state 7

    decs        go to state 54
    dec         go to state 55
    var_dec     go to state 12
    lambda_dec  go to state 56


State 48

   21 lambda_block: "{" "}" •

    $default  reduce using rule 21 (lambda_block)


State 49

   23 lambda_block: "{" "return" • expr "}"

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 57


State 50

    4 statements: statements • statement
   20 lambda_block: "{" statements • "return" expr "}"
   22             | "{" statements • "}"

    INT_LIT   shift, and go to state 1
    FLT_LIT   shift, and go to state 2
    STR_LIT   shift, and go to state 3
    IDENT     shift, and go to state 4
    "-"       shift, and go to state 5
    "("       shift, and go to state 6
    "lambda"  shift, and go to state 7
    "}"       shift, and go to state 58
    "return"  shift, and go to state 59

    statement   go to state 24
    dec         go to state 11
    var_dec     go to state 12
    lambda_dec  go to state 13
    lambda_def  go to state 14
    expr        go to state 15


State 51

   29 expr: expr • "+" expr
   30     | expr • "-" expr
   31     | expr • "*" expr
   32     | expr • "/" expr
   37 lambda_args: lambda_args "," expr •

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29

    $default  reduce using rule 37 (lambda_args)


State 52

   12 var_dec: IDENT • IDENT
   13        | IDENT • IDENT "=" expr

    IDENT  shift, and go to state 16


State 53

   15 lambda_dec: "lambda" IDENT IDENT "(" ")" •

    $default  reduce using rule 15 (lambda_dec)


State 54

    9 decs: decs • "," dec
   14 lambda_dec: "lambda" IDENT IDENT "(" decs • ")"
   16           | "lambda" IDENT IDENT "(" decs • "..." ")"

    ")"    shift, and go to state 60
    ","    shift, and go to state 61
    "..."  shift, and go to state 62


State 55

    8 decs: dec •

    $default  reduce using rule 8 (decs)


State 56

   11 dec: lambda_dec •

    $default  reduce using rule 11 (dec)


State 57

   23 lambda_block: "{" "return" expr • "}"
   29 expr: expr • "+" expr
   30     | expr • "-" expr
   31     | expr • "*" expr
   32     | expr • "/" expr

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29
    "}"  shift, and go to state 63


State 58

   22 lambda_block: "{" statements "}" •

    $default  reduce using rule 22 (lambda_block)


State 59

   20 lambda_block: "{" statements "return" • expr "}"

    INT_LIT  shift, and go to state 1
    FLT_LIT  shift, and go to state 2
    STR_LIT  shift, and go to state 3
    IDENT    shift, and go to state 19
    "-"      shift, and go to state 5
    "("      shift, and go to state 6

    expr  go to state 64


State 60

   14 lambda_dec: "lambda" IDENT IDENT "(" decs ")" •

    $default  reduce using rule 14 (lambda_dec)


State 61

    9 decs: decs "," • dec

    IDENT     shift, and go to state 52
    "lambda"  shift, and go to state 7

    dec         go to state 65
    var_dec     go to state 12
    lambda_dec  go to state 56


State 62

   16 lambda_dec: "lambda" IDENT IDENT "(" decs "..." • ")"

    ")"  shift, and go to state 66


State 63

   23 lambda_block: "{" "return" expr "}" •

    $default  reduce using rule 23 (lambda_block)


State 64

   20 lambda_block: "{" statements "return" expr • "}"
   29 expr: expr • "+" expr
   30     | expr • "-" expr
   31     | expr • "*" expr
   32     | expr • "/" expr

    "+"  shift, and go to state 26
    "*"  shift, and go to state 27
    "-"  shift, and go to state 28
    "/"  shift, and go to state 29
    "}"  shift, and go to state 67


State 65

    9 decs: decs "," dec •

    $default  reduce using rule 9 (decs)


State 66

   16 lambda_dec: "lambda" IDENT IDENT "(" decs "..." ")" •

    $default  reduce using rule 16 (lambda_dec)


State 67

   20 lambda_block: "{" statements "return" expr "}" •

    $default  reduce using rule 20 (lambda_block)
